name: Build, Push, and Deploy Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCR_HOSTNAME: gcr.io

jobs:
  check-paths:
    name: Check for file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'compose.yaml'
              - '.github/workflows/docker-publish.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/docker-publish.yml'

  build-and-push-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    needs: check-paths
    if: needs.check-paths.outputs.backend == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA_EMAIL }}
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=backend
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:latest
          docker push --all-tags ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}
        working-directory: ./backend

  build-and-push-frontend:
    name: Build and Push Frontend
    runs-on: ubuntu-latest
    needs: check-paths
    if: needs.check-paths.outputs.frontend == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA_EMAIL }}
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=frontend
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:latest
          docker push --all-tags ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}
        working-directory: ./frontend

  deploy:
    name: Deploy Application to GCE
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend]
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy compose file to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: app-user
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          source: "compose.yaml"
          target: "~/app"

      - name: Deploy with Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: app-user
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            
            # 1. Create a production .env file
            echo "Creating production .env file..."
            cat << EOF > .env
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            DB_USER=${{ secrets.DB_USER }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PASSWORD=${{ secrets.TF_VAR_initial_db_password }}
            CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME }}
            COUNTRIES_API_BASE_URL=${{ secrets.COUNTRIES_API_BASE_URL }}
            EOF
            
            # 2. Ensure Docker and Docker Compose are installed
            if ! docker compose version &> /dev/null; then
              echo "Installing Docker and Docker Compose..."
              sudo apt-get update
              sudo apt-get install -y docker.io curl
              sudo usermod -aG docker app-user
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -SL "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64" -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            fi
            
            # 3. Authenticate Docker to GCR
            if ! [ -x "$(command -v gcloud)" ]; then
              echo "gcloud not found, installing..."
              sudo apt-get install -y apt-transport-https ca-certificates gnupg
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
              curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            fi
            sudo gcloud auth configure-docker gcr.io -q
            
            # 4. Forcefully clean up any old containers before starting
            echo "Cleaning up old containers..."
            sudo docker stop frontend-container backend-container cloud-sql-proxy || true
            sudo docker rm frontend-container backend-container cloud-sql-proxy || true

            # 5. Pull fresh images and start the new stack
            echo "Starting application with Docker Compose..."
            sudo docker compose pull
            sudo docker compose up -d