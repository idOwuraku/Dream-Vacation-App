name: Build, Push, and Deploy Application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCR_HOSTNAME: gcr.io

jobs:
  check-paths:
    name: Check for file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/docker-publish.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/docker-publish.yml'

  build-and-push-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    needs: check-paths
    if: needs.check-paths.outputs.backend == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA_EMAIL }}
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=backend
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
          docker push ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
        working-directory: ./backend

  build-and-push-frontend:
    name: Build and Push Frontend
    runs-on: ubuntu-latest
    needs: check-paths
    if: needs.check-paths.outputs.frontend == 'true'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_WIF_SA_EMAIL }}
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCR_HOSTNAME }}
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=frontend
          docker build . --tag ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
          docker push ${{ env.GCR_HOSTNAME }}/${{ env.GCP_PROJECT_ID }}/${IMAGE_NAME}:${{ github.sha }}
        working-directory: ./frontend

  deploy-backend:
    name: Deploy Backend to GCE
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GCE via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: app-user
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          script: |
            # Check for Docker and install if not present
            if ! [ -x "$(command -v docker)" ]; then
              echo "Docker not found, installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo usermod -aG docker app-user
            fi

            # Check for gcloud and install if not present
            if ! [ -x "$(command -v gcloud)" ]; then
              echo "gcloud not found, installing..."
              sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
              curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            fi

            # Authenticate Docker to GCR
            gcloud auth configure-docker gcr.io -q

            # Deploy the container
            docker pull gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:${{ github.sha }}
            docker stop backend-container || true
            docker rm backend-container || true
            docker run -d --name backend-container -p 3001:3001 --restart always \
              -e PORT=3001 \
              -e DB_USER="dev" \
              -e DB_NAME="dream_vacations_db" \
              -e DB_HOST="${{ secrets.CLOUD_SQL_CONNECTION_NAME }}" \
              gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:${{ github.sha }}

  deploy-frontend:
    name: Deploy Frontend to GCE
    runs-on: ubuntu-latest
    needs: build-and-push-frontend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GCE via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_INSTANCE_IP }}
          username: app-user
          key: ${{ secrets.GCE_SSH_PRIVATE_KEY }}
          script: |
            # Check for Docker and install if not present
            if ! [ -x "$(command -v docker)" ]; then
              echo "Docker not found, installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo usermod -aG docker app-user
            fi
            
            # Check for gcloud and install if not present
            if ! [ -x "$(command -v gcloud)" ]; then
              echo "gcloud not found, installing..."
              sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
              echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
              curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
              sudo apt-get update && sudo apt-get install -y google-cloud-sdk
            fi

            # Authenticate Docker to GCR
            gcloud auth configure-docker gcr.io -q
            
            # Deploy the frontend container
            docker pull gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${{ github.sha }}
            docker stop frontend-container || true
            docker rm frontend-container || true
            docker run -d --name frontend-container -p 80:80 --restart always \
              gcr.io/${{ secrets.GCP_PROJECT_ID }}/frontend:${{ github.sha }}